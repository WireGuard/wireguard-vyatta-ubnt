name: Build kernel module

on:
  push:
    branches:
      - "master"
  pull_request:
  workflow_dispatch:

env:
  MODULE_VERSION: "1.0.0"
  PACKAGE_RELEASE: "1"

jobs:
  udm-prepare-buildroot:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: Download buildroot-2017.11.1
        run: |
          curl -o buildroot.tar.bz2 https://buildroot.org/downloads/buildroot-2017.11.1.tar.bz2
          tar -xf buildroot.tar.bz2
      - name: Patches
        run: |
          patch -d buildroot-2017.11.1 -p1 <unifios/patches/add-kernel-4-19.patch
          cp unifios/patches/0001-m4-glibc-change-work-around.patch buildroot-2017.11.1/package/m4
          cp unifios/patches/0001-bison-glibc-change-work-around.patch buildroot-2017.11.1/package/bison
          cp unifios/patches/944-mpc-relative-literal-loads-logic-in-aarch64_classify_symbol.patch buildroot-2017.11.1/package/gcc/6.4.0
          cp unifios/patches/0001-dtc-fix-yylloc-duplication.patch buildroot-2017.11.1/package/dtc
      - name: Generate artifacts
        run: tar -cf buildroot.tar buildroot-2017.11.1
      - name: Store headers
        uses: actions/upload-artifact@v2
        with:
          name: buildroot
          path: buildroot.tar
  udm-build-modules:
    needs: [udm-prepare-buildroot]
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        base: [udr-2.2.12]
    steps:
      - uses: actions/checkout@v2
      - name: Restore buildroot
        uses: actions/download-artifact@v2
        with:
          name: buildroot
      - name: Extract buildroot
        run: tar -xf buildroot.tar
      - name: Build macvlan module
        run: |
          mkdir -p modules
          cp unifios/bases/${{ matrix.base }}/buildroot-config.txt buildroot-2017.11.1/.config
          cp unifios/bases/${{ matrix.base }}/kernel-config buildroot-2017.11.1/kernel-config
          versions="$(cat unifios/bases/${{ matrix.base }}/versions.txt)"
          prefix="$(cat unifios/bases/${{ matrix.base }}/prefix)"
          rm -rf ./buildroot-2017.11.1/linux-patches ./buildroot-2017.11.1/patches
          if [ -d "unifios/bases/${{ matrix.base }}/linux-patches" ]; then
            cp -rf "unifios/bases/${{ matrix.base }}/linux-patches" ./buildroot-2017.11.1/
          fi
          if [ -f "unifios/bases/${{ matrix.base }}/linux-patches.tar.gz" ]; then
            tar -C ./buildroot-2017.11.1 -xf "unifios/bases/${{ matrix.base }}/linux-patches.tar.gz"
          fi
          if [ -d "unifios/bases/${{ matrix.base }}/patches" ]; then
            cp -rf "unifios/bases/${{ matrix.base }}/patches" ./buildroot-2017.11.1/
          fi
          cd buildroot-2017.11.1
          make linux-build
          cp output/build/linux-custom/drivers/net/macvlan.ko ../modules/macvlan.ko
      - name: Store modules
        uses: actions/upload-artifact@v2
        with:
          name: modules
          path: modules
  # udm-package:
  #   needs: [udm-build-tools, udm-build-modules]
  #   runs-on: ubuntu-20.04
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Prepare
  #       run: mkdir -p package package/wireguard package/wireguard/modules
  #     - name: Restore modules
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: modules
  #         path: package/wireguard/modules
  #     - name: Add setup
  #       run: cp unifios/setup_wireguard.sh package/wireguard/
  #     - name: Package
  #       run: tar -C package -czf UnifiOS-$MODULE_VERSION.tar.gz ./
  #     - name: Store package
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: release_unifios
  #         path: UnifiOS-${{ env.MODULE_VERSION }}-${{ env.TOOLS_VERSION }}.tar.gz

  # release:
  #   runs-on: ubuntu-20.04
  #   needs:
  #     - package
  #     - udm-package

  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Create Release
  #       id: create_release
  #       uses: fossoreslp/release-artifacts@v1
  #       with:
  #         title: WireGuard ${{ env.MODULE_VERSION }}
  #         template: ci/release_body.md
  #         token: ${{ secrets.GITHUB_TOKEN }}
  #         variables: ${{ toJSON(env) }}
